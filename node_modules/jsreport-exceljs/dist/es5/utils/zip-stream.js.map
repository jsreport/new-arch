{"version":3,"sources":["../../../lib/utils/zip-stream.js"],"names":["events","require","JSZip","StreamBuf","ZipReader","options","count","jsZip","stream","on","_process","getEntryType","process","nextTick","emit","content","read","loadAsync","zip","forEach","path","entry","dir","async","data","entryStream","write","autodrain","_finished","encoding","callback","error","result","cork","uncork","end","EventEmitter","ZipWriter","Object","assign","type","compression","hasOwnProperty","base64","file","name","generateAsync","size","setEncoding","pause","resume","isPaused","destination","pipe","unpipe","chunk","unshift","wrap","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\nconst events = require('events');\nconst JSZip = require('jszip');\n\nconst StreamBuf = require('./stream-buf');\n\n// The purpose of this module is to wrap the js-zip library into a streaming zip library\n// since most of the exceljs code uses streams.\n// One day I might find (or build) a properly streaming browser safe zip lib\n\n\n// =============================================================================\n// The ZipReader class\n// Unpacks an incoming zip stream\nclass ZipReader extends events.EventEmitter {\n  constructor(options) {\n    super();\n\n    this.count = 0;\n    this.jsZip = new JSZip();\n    this.stream = new StreamBuf();\n    this.stream.on('finish', () => {\n      this._process();\n    });\n    this.getEntryType = options.getEntryType || (() => 'string');\n  };\n\n  _finished() {\n    if (!--this.count) {\n      process.nextTick(() => {\n        this.emit('finished');\n      });\n    }\n  }\n\n  async _process() {\n    try {\n      const content = this.stream.read();\n      const zip = await this.jsZip.loadAsync(content);\n      zip.forEach(async (path, entry) => {\n        if (!entry.dir) {\n          this.count++;\n          try {\n            const data = await entry.async(this.getEntryType(path));\n            const entryStream = new StreamBuf();\n            entryStream.path = path;\n            entryStream.write(data);\n            entryStream.autodrain = () => {\n              this._finished();\n            };\n            entryStream.on('finish', () => {\n              this._finished();\n            });\n\n            this.emit('entry', entryStream);\n          } catch (error) {\n            this.emit('error', error);\n          }\n        }\n      });\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  // ==========================================================================\n  // Stream.Writable interface\n  async write(data, encoding, callback) {\n    if (this.error) {\n      if (callback) {\n        callback(this.error);\n      }\n      throw this.error;\n    } else {\n      try {\n        const result = await this.stream.write(data, encoding, callback);\n        return result;\n     } catch (err) {\n       this.emit('error', err);\n       return err;\n     }\n    }\n  }\n\n  cork() {\n    return this.stream.cork();\n  }\n\n  uncork() {\n    return this.stream.uncork();\n  }\n\n  end() {\n    return this.stream.end();\n  }\n\n  destroy(error) {\n    this.emit('finished');\n    this.error = error;\n  }\n}\n\n// =============================================================================\n// The ZipWriter class\n// Packs streamed data into an output zip stream\nclass ZipWriter extends events.EventEmitter {\n  constructor(options) {\n    super();\n    this.options = Object.assign({\n      type: 'nodebuffer',\n      compression: 'DEFLATE',\n    }, options);\n\n    this.zip = new JSZip();\n    this.stream = new StreamBuf();\n  };\n\n  append(data, options) {\n    if (options.hasOwnProperty('base64') && options.base64) {\n      this.zip.file(options.name, data, {base64: true});\n    } else {\n      this.zip.file(options.name, data);\n    }\n  }\n\n  async finalize() {\n    const content = await this.zip.generateAsync(this.options);\n    this.stream.end(content);\n    this.emit('finish');\n  }\n\n  // ==========================================================================\n  // Stream.Readable interface\n  read(size) {\n    return this.stream.read(size);\n  }\n\n  setEncoding(encoding) {\n    return this.stream.setEncoding(encoding);\n  }\n\n  pause() {\n    return this.stream.pause();\n  }\n\n  resume() {\n    return this.stream.resume();\n  }\n\n  isPaused() {\n    return this.stream.isPaused();\n  }\n\n  pipe(destination, options) {\n    return this.stream.pipe(\n      destination,\n      options\n    );\n  }\n\n  unpipe(destination) {\n    return this.stream.unpipe(destination);\n  }\n\n  unshift(chunk) {\n    return this.stream.unshift(chunk);\n  }\n\n  wrap(stream) {\n    return this.stream.wrap(stream);\n  }\n}\n\n// =============================================================================\n\nmodule.exports = {\n  ZipReader,\n  ZipWriter,\n};\n"],"file":"zip-stream.js"}