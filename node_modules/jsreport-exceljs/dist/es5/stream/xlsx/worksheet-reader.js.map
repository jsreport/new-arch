{"version":3,"sources":["../../../../lib/stream/xlsx/worksheet-reader.js"],"names":["require","EventEmitter","Sax","_","utils","colCache","Dimensions","Row","Column","WorksheetReader","workbook","id","name","_columns","_keys","_dimensions","Error","c","col","l2n","length","n","push","key","value","f","each","row","emit","entry","options","emitSheet","emitHyperlinks","hyperlinks","worksheets","autodrain","sharedStrings","styles","properties","inCols","inRows","inHyperlinks","cols","current","parser","createStream","on","node","min","parseInt","attributes","max","width","parseFloat","styleId","style","r","ht","height","s","getStyleModel","ref","t","text","v","hyperlink","rId","fromModel","expandRow","_emitRow","address","decodeAddress","cell","getCell","formula","result","xmlDecode","index","sharedString","error","isDateFmt","numFmt","excelToDate","model","date1904","undefined","flowControl","createChild","pipe","sync","module","exports"],"mappings":"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","sourcesContent":["const {EventEmitter} = require('events');\nconst Sax = require('sax');\n\nconst _ = require('../../utils/under-dash');\nconst utils = require('../../utils/utils');\nconst colCache = require('../../utils/col-cache');\nconst Dimensions = require('../../doc/range');\n\nconst Row = require('../../doc/row');\nconst Column = require('../../doc/column');\n\nclass WorksheetReader extends EventEmitter {\n  constructor(workbook, id) {\n    super();\n\n    this.workbook = workbook;\n    this.id = id;\n\n    // and a name\n    this.name = `Sheet${this.id}`;\n\n    // column definitions\n    this._columns = null;\n    this._keys = {};\n\n    // keep a record of dimensions\n    this._dimensions = new Dimensions();\n  }\n\n  // destroy - not a valid operation for a streaming writer\n  // even though some streamers might be able to, it's a bad idea.\n  destroy() {\n    throw new Error('Invalid Operation: destroy');\n  }\n\n  // return the current dimensions of the writer\n  get dimensions() {\n    return this._dimensions;\n  }\n\n  // =========================================================================\n  // Columns\n\n  // get the current columns array.\n  get columns() {\n    return this._columns;\n  }\n\n  // get a single column by col number. If it doesn't exist, it and any gaps before it\n  // are created.\n  getColumn(c) {\n    if (typeof c === 'string') {\n      // if it matches a key'd column, return that\n      const col = this._keys[c];\n      if (col) {\n        return col;\n      }\n\n      // otherise, assume letter\n      c = colCache.l2n(c);\n    }\n    if (!this._columns) {\n      this._columns = [];\n    }\n    if (c > this._columns.length) {\n      let n = this._columns.length + 1;\n      while (n <= c) {\n        this._columns.push(new Column(this, n++));\n      }\n    }\n    return this._columns[c - 1];\n  }\n\n  getColumnKey(key) {\n    return this._keys[key];\n  }\n\n  setColumnKey(key, value) {\n    this._keys[key] = value;\n  }\n\n  deleteColumnKey(key) {\n    delete this._keys[key];\n  }\n\n  eachColumnKey(f) {\n    _.each(this._keys, f);\n  }\n\n  // =========================================================================\n  // Read\n\n  _emitRow(row) {\n    this.emit('row', row);\n  }\n\n  read(entry, options) {\n    let emitSheet = false;\n    let emitHyperlinks = false;\n    let hyperlinks = null;\n    switch (options.worksheets) {\n      case 'emit':\n        emitSheet = true;\n        break;\n      case 'prep':\n        break;\n      default:\n        break;\n    }\n    switch (options.hyperlinks) {\n      case 'emit':\n        emitHyperlinks = true;\n        break;\n      case 'cache':\n        this.hyperlinks = hyperlinks = {};\n        break;\n      default:\n        break;\n    }\n    if (!emitSheet && !emitHyperlinks && !hyperlinks) {\n      entry.autodrain();\n      this.emit('finished');\n      return;\n    }\n\n    // references\n    const {sharedStrings} = this.workbook;\n    const {styles} = this.workbook;\n    const {properties} = this.workbook;\n\n    // xml position\n    let inCols = false;\n    let inRows = false;\n    let inHyperlinks = false;\n\n    // parse state\n    let cols = null;\n    let row = null;\n    let c = null;\n    let current = null;\n\n    const parser = Sax.createStream(true, {});\n    parser.on('opentag', node => {\n      if (emitSheet) {\n        switch (node.name) {\n          case 'cols':\n            inCols = true;\n            cols = [];\n            break;\n          case 'sheetData':\n            inRows = true;\n            break;\n\n          case 'col':\n            if (inCols) {\n              cols.push({\n                min: parseInt(node.attributes.min, 10),\n                max: parseInt(node.attributes.max, 10),\n                width: parseFloat(node.attributes.width),\n                styleId: parseInt(node.attributes.style || '0', 10),\n              });\n            }\n            break;\n\n          case 'row':\n            if (inRows) {\n              const r = parseInt(node.attributes.r, 10);\n              row = new Row(this, r);\n              if (node.attributes.ht) {\n                row.height = parseFloat(node.attributes.ht);\n              }\n              if (node.attributes.s) {\n                const styleId = parseInt(node.attributes.s, 10);\n                const style = styles.getStyleModel(styleId);\n                if (style) {\n                  row.style = style;\n                }\n              }\n            }\n            break;\n          case 'c':\n            if (row) {\n              c = {\n                ref: node.attributes.r,\n                s: parseInt(node.attributes.s, 10),\n                t: node.attributes.t,\n              };\n            }\n            break;\n          case 'f':\n            if (c) {\n              current = c.f = {text: ''};\n            }\n            break;\n          case 'v':\n            if (c) {\n              current = c.v = {text: ''};\n            }\n            break;\n          case 'mergeCell':\n            break;\n          default:\n            break;\n        }\n      }\n\n      // =================================================================\n      //\n      if (emitHyperlinks || hyperlinks) {\n        switch (node.name) {\n          case 'hyperlinks':\n            inHyperlinks = true;\n            break;\n          case 'hyperlink':\n            if (inHyperlinks) {\n              const hyperlink = {\n                ref: node.attributes.ref,\n                rId: node.attributes['r:id'],\n              };\n              if (emitHyperlinks) {\n                this.emit('hyperlink', hyperlink);\n              } else {\n                hyperlinks[hyperlink.ref] = hyperlink;\n              }\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    });\n\n    // only text data is for sheet values\n    parser.on('text', text => {\n      if (emitSheet) {\n        if (current) {\n          current.text += text;\n        }\n      }\n    });\n\n    parser.on('closetag', name => {\n      if (emitSheet) {\n        switch (name) {\n          case 'cols':\n            inCols = false;\n            this._columns = Column.fromModel(cols);\n            break;\n          case 'sheetData':\n            inRows = false;\n            break;\n\n          case 'row':\n            this._dimensions.expandRow(row);\n            this._emitRow(row);\n            row = null;\n            break;\n\n          case 'c':\n            if (row && c) {\n              const address = colCache.decodeAddress(c.ref);\n              const cell = row.getCell(address.col);\n              if (c.s) {\n                const style = styles.getStyleModel(c.s);\n                if (style) {\n                  cell.style = style;\n                }\n              }\n\n              if (c.f) {\n                const value = {\n                  formula: c.f.text,\n                };\n                if (c.v) {\n                  if (c.t === 'str') {\n                    value.result = utils.xmlDecode(c.v.text);\n                  } else {\n                    value.result = parseFloat(c.v.text);\n                  }\n                }\n                cell.value = value;\n              } else if (c.v) {\n                switch (c.t) {\n                  case 's': {\n                    const index = parseInt(c.v.text, 10);\n                    if (sharedStrings) {\n                      cell.value = sharedStrings[index];\n                    } else {\n                      cell.value = {\n                        sharedString: index,\n                      };\n                    }\n                    break;\n                  }\n\n                  case 'str':\n                    cell.value = utils.xmlDecode(c.v.text);\n                    break;\n\n                  case 'e':\n                    cell.value = {error: c.v.text};\n                    break;\n\n                  case 'b':\n                    cell.value = parseInt(c.v.text, 10) !== 0;\n                    break;\n\n                  default:\n                    if (utils.isDateFmt(cell.numFmt)) {\n                      cell.value = utils.excelToDate(parseFloat(c.v.text), properties.model.date1904);\n                    } else {\n                      cell.value = parseFloat(c.v.text);\n                    }\n                    break;\n                }\n              }\n              if (hyperlinks) {\n                const hyperlink = hyperlinks[c.ref];\n                if (hyperlink) {\n                  cell.text = cell.value;\n                  cell.value = undefined;\n                  cell.hyperlink = hyperlink;\n                }\n              }\n              c = null;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n      if (emitHyperlinks || hyperlinks) {\n        switch (name) {\n          case 'hyperlinks':\n            inHyperlinks = false;\n            break;\n          default:\n            break;\n        }\n      }\n    });\n    parser.on('error', error => {\n      this.emit('error', error);\n    });\n    parser.on('end', () => {\n      this.emit('finished');\n    });\n\n    // create a down-stream flow-control to regulate the stream\n    const flowControl = this.workbook.flowControl.createChild();\n    flowControl.pipe(\n      parser,\n      {sync: true}\n    );\n    entry.pipe(flowControl);\n  }\n}\n\nmodule.exports = WorksheetReader;\n"],"file":"worksheet-reader.js"}