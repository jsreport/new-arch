{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["Sax","require","XmlStream","BaseXform","node","text","name","model","options","map","Object","values","forEach","xform","reset","obj","assign","parser","stream","Promise","resolve","reject","abort","error","removeAllListeners","on","unpipe","parseOpen","parseText","parseClose","createStream","promise","parse","pipe","xmlStream","render","xml","toXml","value","dflt","allways","undefined","toString","toAttribute","attr","parseInt","parseFloat","module","exports"],"mappings":"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","sourcesContent":["const Sax = require('sax');\n\nconst XmlStream = require('../../utils/xml-stream');\n\n/* 'virtual' methods used as a form of documentation */\n/* eslint-disable class-methods-use-this */\n\n// Base class for Xforms\nclass BaseXform {\n  // constructor(/* model, name */) {}\n\n  // ============================================================\n  // Virtual Interface\n  prepare(/* model, options */) {\n    // optional preparation (mutation) of model so it is ready for write\n  }\n\n  render(/* xmlStream, model */) {\n    // convert model to xml\n  }\n\n  parseOpen(node) {\n    // XML node opened\n  }\n\n  parseText(text) {\n    // chunk of text encountered for current node\n  }\n\n  parseClose(name) {\n    // XML node closed\n  }\n\n  reconcile(model, options) {\n    // optional post-parse step (opposite to prepare)\n  }\n\n  // ============================================================\n  reset() {\n    // to make sure parses don't bleed to next iteration\n    this.model = null;\n\n    // if we have a map - reset them too\n    if (this.map) {\n      Object.values(this.map).forEach(xform => {\n        if (xform instanceof BaseXform) {\n          xform.reset();\n        } else if (xform.xform) {\n          xform.xform.reset();\n        }\n      });\n    }\n  }\n\n  mergeModel(obj) {\n    // set obj's props to this.model\n    this.model = Object.assign(this.model || {}, obj);\n  }\n\n  parse(parser, stream) {\n    return new Promise((resolve, reject) => {\n      const abort = error => {\n        // Abandon ship! Prevent the parser from consuming any more resources\n        parser.removeAllListeners();\n        parser.on('error', () => {}); // Ignore any parse errors from the chunk being processed\n        stream.unpipe(parser);\n        reject(error);\n      };\n\n      parser.on('opentag', node => {\n        try {\n          // console.log('opentag', node.name);\n          this.parseOpen(node);\n        } catch (error) {\n          abort(error);\n        }\n      });\n      parser.on('text', text => {\n        try {\n          this.parseText(text);\n        } catch (error) {\n          abort(error);\n        }\n      });\n      parser.on('closetag', name => {\n        try {\n          // console.log('closetag', name);\n          if (!this.parseClose(name)) {\n            resolve(this.model);\n          }\n        } catch (error) {\n          abort(error);\n        }\n      });\n      parser.on('end', () => {\n        // console.log('end');\n        resolve(this.model);\n      });\n      parser.on('error', error => {\n        abort(error);\n      });\n    });\n  }\n\n  parseStream(stream) {\n    const parser = Sax.createStream(true, {});\n    const promise = this.parse(parser, stream);\n    stream.pipe(parser);\n\n    return promise;\n  }\n\n  get xml() {\n    // convenience function to get the xml of this.model\n    // useful for manager types that are built during the prepare phase\n    return this.toXml(this.model);\n  }\n\n  toXml(model) {\n    const xmlStream = new XmlStream();\n    this.render(xmlStream, model);\n    return xmlStream.xml;\n  }\n\n  // ============================================================\n  // Useful Utilities\n  static toAttribute(value, dflt, allways = false) {\n    if (value === undefined) {\n      if (allways) {\n        return dflt;\n      }\n    } else if (allways || (value !== dflt)) {\n      return value.toString();\n    }\n    return undefined;\n  }\n\n\n  static toStringAttribute(value, dflt, allways = false) {\n    return BaseXform.toAttribute(value, dflt, allways);\n  }\n\n  static toStringValue(attr, dflt) {\n    return (attr === undefined) ? dflt : attr;\n  }\n\n  static toBoolAttribute(value, dflt, allways = false) {\n    if (value === undefined) {\n      if (allways) {\n        return dflt;\n      }\n    } else if (allways || (value !== dflt)) {\n      return value ? '1' : '0';\n    }\n    return undefined;\n  }\n\n  static toBoolValue(attr, dflt) {\n    return (attr === undefined) ? dflt : (attr === '1');\n  }\n\n  static toIntAttribute(value, dflt, allways = false) {\n    return BaseXform.toAttribute(value, dflt, allways);\n  }\n\n  static toIntValue(attr, dflt) {\n    return (attr === undefined) ? dflt : parseInt(attr, 10);\n  }\n\n  static toFloatAttribute(value, dflt, allways = false) {\n    return BaseXform.toAttribute(value, dflt, allways);\n  }\n\n  static toFloatValue(attr, dflt) {\n    return (attr === undefined) ? dflt : parseFloat(attr);\n  }\n\n\n}\n\nmodule.exports = BaseXform;\n"],"file":"base-xform.js"}