{"version":3,"sources":["../../../../lib/xlsx/xform/composite-xform.js"],"names":["BaseXform","require","CompositeXform","node","parser","map","name","parseOpen","tag","model","createNewModel","text","parseText","parseClose","onParserClose","undefined","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;AAEA;;AACA;AAEA;AACA;;;IACMC,c;;;;;;;;;;;;;mCACWC,I,EAAM;AACnB,aAAO,EAAP;AACD;;;8BAESA,I,EAAM;AACd;AACA,WAAKC,MAAL,GAAc,KAAKA,MAAL,IAAe,KAAKC,GAAL,CAASF,IAAI,CAACG,IAAd,CAA7B;;AACA,UAAI,KAAKF,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYG,SAAZ,CAAsBJ,IAAtB;AACA,eAAO,IAAP;AACD;;AAED,UAAIA,IAAI,CAACG,IAAL,KAAc,KAAKE,GAAvB,EAA4B;AAC1B,aAAKC,KAAL,GAAa,KAAKC,cAAL,CAAoBP,IAApB,CAAb;AACA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;;;8BAESQ,I,EAAM;AACd;AACA,UAAI,KAAKP,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYQ,SAAZ,CAAsBD,IAAtB;AACD;AACF;;;kCAEaL,I,EAAMF,M,EAAQ;AAC1B;AACA;AACA,WAAKK,KAAL,CAAWH,IAAX,IAAmBF,MAAM,CAACK,KAA1B;AACD;;;+BAEUH,I,EAAM;AACf;AACA,UAAI,KAAKF,MAAT,EAAiB;AACf,YAAI,CAAC,KAAKA,MAAL,CAAYS,UAAZ,CAAuBP,IAAvB,CAAL,EAAmC;AACjC,eAAKQ,aAAL,CAAmBR,IAAnB,EAAyB,KAAKF,MAA9B;AACA,eAAKA,MAAL,GAAcW,SAAd;AACD;;AACD,eAAO,IAAP;AACD;;AAED,aAAQT,IAAI,KAAK,KAAKE,GAAtB;AACD;;;;EA7C0BR,S;;AAgD7BgB,MAAM,CAACC,OAAP,GAAiBf,cAAjB","sourcesContent":["const BaseXform = require('./base-xform');\n\n/* 'virtual' methods used as a form of documentation */\n/* eslint-disable class-methods-use-this */\n\n// base class for xforms that are composed of other xforms\n// offers some default implementations\nclass CompositeXform extends BaseXform {\n  createNewModel(node) {\n    return {};\n  }\n\n  parseOpen(node) {\n    // Typical pattern for composite xform\n    this.parser = this.parser || this.map[node.name];\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    if (node.name === this.tag) {\n      this.model = this.createNewModel(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  parseText(text) {\n    // Default implementation. Send text to child parser\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  onParserClose(name, parser) {\n    // parseClose has seen a child parser close\n    // now need to incorporate into this.model somehow\n    this.model[name] = parser.model;\n  }\n\n  parseClose(name) {\n    // Default implementation\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.onParserClose(name, this.parser);\n        this.parser = undefined;\n      }\n      return true;\n    }\n\n    return (name !== this.tag);\n  }\n}\n\nmodule.exports = CompositeXform;\n"],"file":"composite-xform.js"}