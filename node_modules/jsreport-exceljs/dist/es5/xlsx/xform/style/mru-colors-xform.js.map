{"version":3,"sources":["../../../../../lib/xlsx/xform/style/mru-colors-xform.js"],"names":["BaseXform","require","MruColorsXform","options","xmlStream","model","openNode","colors","forEach","color","rgb","closeNode","node","name","push","attributes","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;IACMC,c;;;;;AACJ,0BAAYC,OAAZ,EAAqB;AAAA;;AAAA;AAEpB;;;;2BAMMC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAACE,QAAV,CAAmB,WAAnB;AACAD,MAAAA,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqB,UAACC,KAAD,EAAW;AAC9BL,QAAAA,SAAS,CAACE,QAAV,CAAmB,OAAnB,EAA4B;AAC1BI,UAAAA,GAAG,EAAED,KAAK,CAACC;AADe,SAA5B;AAGAN,QAAAA,SAAS,CAACO,SAAV;AACD,OALD;AAMAP,MAAAA,SAAS,CAACO,SAAV;AACD;;;8BAESC,I,EAAM;AACd;AACA,cAAQA,IAAI,CAACC,IAAb;AACE,aAAK,WAAL;AACE,eAAKR,KAAL,GAAa;AACXE,YAAAA,MAAM,EAAE;AADG,WAAb;AAGA,iBAAO,IAAP;;AACF,aAAK,OAAL;AACE,eAAKF,KAAL,CAAWE,MAAX,CAAkBO,IAAlB,CAAuB;AACrBJ,YAAAA,GAAG,EAAEE,IAAI,CAACG,UAAL,CAAgBL;AADA,WAAvB;AAGA,iBAAO,IAAP;;AACF;AACE,iBAAO,KAAP;AAZJ;AAcD;;;gCAEW,CAAE;;;+BAEHG,I,EAAM;AACf,aAAOA,IAAI,KAAK,WAAhB;AACD;;;wBArCS;AACR,aAAO,WAAP;AACD;;;;EAP0Bb,S;;AA6C7BgB,MAAM,CAACC,OAAP,GAAiBf,cAAjB","sourcesContent":["const BaseXform = require('../base-xform');\n\n// <mruColors>\n//  <color rgb=\"[rgb]\"/>\n//  <color rgb=\"[rgb]\"/>\n//  <color rgb=\"[rgb]\"/>\n//  <color rgb=\"[rgb]\"/>\n//  <color rgb=\"[rgb]\"/>\n//  <color rgb=\"[rgb]\"/>\n//  <color rgb=\"[rgb]\"/>\n//  <color rgb=\"[rgb]\"/>\n// </mruColors>\n\n// Style assists translation from style model to/from xlsx\nclass MruColorsXform extends BaseXform {\n  constructor(options) {\n    super();\n  }\n\n  get tag() {\n    return 'mruColors';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode('mruColors');\n    model.colors.forEach((color) => {\n      xmlStream.openNode('color', {\n        rgb: color.rgb,\n      });\n      xmlStream.closeNode();\n    });\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    // used during sax parsing of xml to build object\n    switch (node.name) {\n      case 'mruColors':\n        this.model = {\n          colors: [],\n        };\n        return true;\n      case 'color':\n        this.model.colors.push({\n          rgb: node.attributes.rgb,\n        });\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  parseText() {}\n\n  parseClose(name) {\n    return name !== 'mruColors';\n  }\n}\n\nmodule.exports = MruColorsXform;\n"],"file":"mru-colors-xform.js"}