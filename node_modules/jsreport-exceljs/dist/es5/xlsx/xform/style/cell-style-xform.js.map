{"version":3,"sources":["../../../../../lib/xlsx/xform/style/cell-style-xform.js"],"names":["BaseXform","require","CellStyleXform","xmlStream","model","openNode","name","xfId","builtinId","closeNode","node","parser","parseOpen","attributes","parseInt","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB,C,CAEA;AAEA;;;IACMC,c;;;;;;;;;;;;;2BAKGC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAACE,QAAV,CAAmB,WAAnB,EAAgC;AAC9BC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IADkB;AAE9BC,QAAAA,IAAI,EAAEH,KAAK,CAACG,IAAN,IAAc,CAFU;AAG9BC,QAAAA,SAAS,EAAEJ,KAAK,CAACI,SAAN,IAAmB;AAHA,OAAhC;AAMAL,MAAAA,SAAS,CAACM,SAAV;AACD;;;8BAESC,I,EAAM;AACd,UAAI,KAAKC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,eAAO,IAAP;AACD,OAJa,CAMd;;;AACA,cAAQA,IAAI,CAACJ,IAAb;AACE,aAAK,WAAL;AACE,eAAKF,KAAL,GAAa;AACXE,YAAAA,IAAI,EAAEI,IAAI,CAACG,UAAL,CAAgBP,IADX;AAEXC,YAAAA,IAAI,EAAEO,QAAQ,CAACJ,IAAI,CAACG,UAAL,CAAgBN,IAAjB,EAAuB,EAAvB,CAFH;AAGXC,YAAAA,SAAS,EAAEM,QAAQ,CAACJ,IAAI,CAACG,UAAL,CAAgBL,SAAjB,EAA4B,EAA5B;AAHR,WAAb;AAKA,iBAAO,IAAP;;AACF;AACE,iBAAO,KAAP;AATJ;AAWD;;;gCAEW,CAAE;;;iCAED;AACX,aAAO,KAAP;AACD;;;wBAtCS;AACR,aAAO,WAAP;AACD;;;;EAH0BR,S;;AA0C7Be,MAAM,CAACC,OAAP,GAAiBd,cAAjB","sourcesContent":["const BaseXform = require('../base-xform');\n\n// <cellStyle name=\"[name]\" xfId=\"[xfId]\" builtinId=\"[builtinId]\"/>\n\n// Style assists translation from style model to/from xlsx\nclass CellStyleXform extends BaseXform {\n  get tag() {\n    return 'cellStyle';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode('cellStyle', {\n      name: model.name,\n      xfId: model.xfId || 0,\n      builtinId: model.builtinId || 0,\n    });\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    // used during sax parsing of xml to build object\n    switch (node.name) {\n      case 'cellStyle':\n        this.model = {\n          name: node.attributes.name,\n          xfId: parseInt(node.attributes.xfId, 10),\n          builtinId: parseInt(node.attributes.builtinId, 10),\n        };\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  parseText() {}\n\n  parseClose() {\n    return false;\n  }\n}\n\nmodule.exports = CellStyleXform;\n"],"file":"cell-style-xform.js"}