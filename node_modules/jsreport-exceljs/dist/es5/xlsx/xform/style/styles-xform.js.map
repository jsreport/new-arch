{"version":3,"sources":["../../../../../lib/xlsx/xform/style/styles-xform.js"],"names":["Enums","require","XmlStream","BaseXform","StaticXform","ListXform","FontXform","FillXform","BorderXform","NumFmtXform","StyleXform","CellStyleXform","MruColorsXform","DxfXform","NUMFMT_BASE","StylesXform","initialise","map","numFmts","tag","count","childXform","fonts","$","fills","borders","cellStyleXfs","cellXfs","xfId","dxfs","always","cellStyles","colors","numFmt","font","fill","border","styleXfs","cellStyle","style","color","tableStyles","STATIC_XFORMS","extLst","init","index","numFmtNextId","model","styles","stylesXfs","initIndex","_addBorder","_addStyle","numFmtId","fontId","fillId","borderId","_addFill","type","pattern","weakMap","WeakMap","xmlStream","openXml","StdDocAttributes","openNode","STYLESHEET_ATTRIBUTES","length","forEach","numFmtXml","writeXml","closeNode","_addFont","size","theme","name","family","scheme","fontXml","fillXml","borderXml","render","styleXml","node","parser","parseOpen","text","parseText","parseClose","undefined","add","_addFn","xform","getter","params","call","_addNumFmtStr","formatCode","_addStyleXfs","_addCellStyle","addDxfStyle","_addColor","numFmtIndex","id","cellType","has","get","ValueType","Number","Date","alignment","protection","styleId","set","getDefaultFmtCode","addStyle","group","part","push","allowDuplicates","xml","toXml","getDefaultFmtId","xmlns","c","builtinId","defaultTableStyle","defaultPivotStyle","uri","defaultSlicerStyle","defaultTimelineStyle","StylesXformMock","stream","autodrain","Promise","resolve","dateStyleId","_dateStyleId","dateStyle","Mock","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\nconst Enums = require('../../../doc/enums');\nconst XmlStream = require('../../../utils/xml-stream');\n\nconst BaseXform = require('../base-xform');\nconst StaticXform = require('../static-xform');\nconst ListXform = require('../list-xform');\nconst FontXform = require('./font-xform');\nconst FillXform = require('./fill-xform');\nconst BorderXform = require('./border-xform');\nconst NumFmtXform = require('./numfmt-xform');\nconst StyleXform = require('./style-xform');\nconst CellStyleXform = require('./cell-style-xform');\nconst MruColorsXform = require('./mru-colors-xform');\nconst DxfXform = require('./dxf-xform');\n\n// custom numfmt ids start here\nconst NUMFMT_BASE = 164;\n\n// =============================================================================\n// StylesXform is used to generate and parse the styles.xml file\n// it manages the collections of fonts, number formats, alignments, etc\nclass StylesXform extends BaseXform {\n  constructor(initialise) {\n    super();\n\n    this.map = {\n      numFmts: new ListXform({tag: 'numFmts', count: true, childXform: new NumFmtXform()}),\n      fonts: new ListXform({tag: 'fonts', count: true, childXform: new FontXform(), $: {'x14ac:knownFonts': 1}}),\n      fills: new ListXform({tag: 'fills', count: true, childXform: new FillXform()}),\n      borders: new ListXform({tag: 'borders', count: true, childXform: new BorderXform()}),\n      cellStyleXfs: new ListXform({tag: 'cellStyleXfs', count: true, childXform: new StyleXform()}),\n      cellXfs: new ListXform({tag: 'cellXfs', count: true, childXform: new StyleXform({xfId: true})}),\n      dxfs: new ListXform({tag: 'dxfs', always: true, count: true, childXform: new DxfXform()}),\n      cellStyles: new ListXform({tag: 'cellStyles', always: true, count: true, childXform: new CellStyleXform()}),\n      colors: new ListXform({tag: 'colors', childXform: new MruColorsXform()}),\n\n      // for style manager\n      numFmt: new NumFmtXform(),\n      font: new FontXform(),\n      fill: new FillXform(),\n      border: new BorderXform(),\n      styleXfs: new StyleXform(),\n      cellStyle: new CellStyleXform(),\n      style: new StyleXform({xfId: true}),\n      color: new MruColorsXform(),\n\n      // cellStyles: StylesXform.STATIC_XFORMS.cellStyles,\n      tableStyles: StylesXform.STATIC_XFORMS.tableStyles,\n      extLst: StylesXform.STATIC_XFORMS.extLst,\n    };\n\n    if (initialise) {\n      // StylesXform also acts as style manager and is used to build up styles-model during worksheet processing\n      this.init();\n    }\n  }\n\n  initIndex() {\n    this.index = {\n      style: {},\n      styleXfs: {},\n      cellStyle: {},\n      numFmt: {},\n      numFmtNextId: 164, // start custom format ids here\n      font: {},\n      border: {},\n      fill: {},\n    };\n  }\n\n  init() {\n    // Prepare for Style Manager role\n    this.model = {\n      styles: [],\n      stylesXfs: [],\n      cellStyles: [],\n      colors: [],\n      numFmts: [],\n      fonts: [],\n      borders: [],\n      fills: [],\n      dxfs: [],\n    };\n\n    this.initIndex();\n\n    // default (zero) border\n    this._addBorder({});\n\n    // add default (all zero) style\n    this._addStyle({numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0});\n\n    // add default fills\n    this._addFill({type: 'pattern', pattern: 'none'});\n    this._addFill({type: 'pattern', pattern: 'gray125'});\n\n    this.weakMap = new WeakMap();\n  }\n\n  render(xmlStream, model) {\n    model = model || this.model;\n    //\n    //   <fonts count=\"2\" x14ac:knownFonts=\"1\">\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n\n    xmlStream.openNode('styleSheet', StylesXform.STYLESHEET_ATTRIBUTES);\n\n    if (this.index) {\n      // model has been built by style manager role (contains xml)\n      if (model.numFmts && model.numFmts.length) {\n        xmlStream.openNode('numFmts', {count: model.numFmts.length});\n        model.numFmts.forEach(numFmtXml => {\n          xmlStream.writeXml(numFmtXml);\n        });\n        xmlStream.closeNode();\n      }\n\n      if (!model.fonts.length) {\n        // default (zero) font\n        this._addFont({size: 11, color: {theme: 1}, name: 'Calibri', family: 2, scheme: 'minor'});\n      }\n      xmlStream.openNode('fonts', {count: model.fonts.length, 'x14ac:knownFonts': 1});\n      model.fonts.forEach(fontXml => {\n        xmlStream.writeXml(fontXml);\n      });\n      xmlStream.closeNode();\n\n      xmlStream.openNode('fills', {count: model.fills.length});\n      model.fills.forEach(fillXml => {\n        xmlStream.writeXml(fillXml);\n      });\n      xmlStream.closeNode();\n\n      xmlStream.openNode('borders', {count: model.borders.length});\n      model.borders.forEach(borderXml => {\n        xmlStream.writeXml(borderXml);\n      });\n      xmlStream.closeNode();\n\n      if (model.stylesXfs.length) {\n        xmlStream.openNode('cellStyleXfs', {count: model.stylesXfs.length});\n        model.stylesXfs.forEach(styleXfs => {\n          xmlStream.writeXml(styleXfs);\n        });\n        xmlStream.closeNode();\n      } else {\n        this.map.cellStyleXfs.render(xmlStream, [{numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0}]);\n      }\n\n      xmlStream.openNode('cellXfs', {count: model.styles.length});\n      model.styles.forEach(styleXml => {\n        xmlStream.writeXml(styleXml);\n      });\n      xmlStream.closeNode();\n    } else {\n      // model is plain JSON and needs to be xformed\n      this.map.numFmts.render(xmlStream, model.numFmts);\n      this.map.fonts.render(xmlStream, model.fonts);\n      this.map.fills.render(xmlStream, model.fills);\n      this.map.borders.render(xmlStream, model.borders);\n      this.map.cellStyleXfs.render(xmlStream, [{numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0}]);\n      this.map.cellXfs.render(xmlStream, model.styles);\n    }\n\n    if (model.cellStyles.length) {\n      xmlStream.openNode('cellStyles', {count: model.cellStyles.length});\n      model.cellStyles.forEach(cellStyle => {\n        xmlStream.writeXml(cellStyle);\n      });\n      xmlStream.closeNode();\n    } else {\n      StylesXform.STATIC_XFORMS.cellStyles.render(xmlStream);\n    }\n\n    this.map.dxfs.render(xmlStream, model.dxfs);\n\n    StylesXform.STATIC_XFORMS.tableStyles.render(xmlStream);\n\n    if (model.colors.length) {\n      xmlStream.openNode('colors');\n      model.colors.forEach((color) => {\n        xmlStream.writeXml(color);\n      });\n      xmlStream.closeNode();\n    }\n\n    StylesXform.STATIC_XFORMS.extLst.render(xmlStream);\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case 'styleSheet':\n        this.initIndex();\n        return true;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        return true;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case 'styleSheet': {\n        this.model = {\n          styles: [],\n          stylesXfs: [],\n          cellStyles: [],\n          colors: [],\n          numFmts: [],\n          fonts: [],\n          borders: [],\n          fills: [],\n          dxfs: [],\n        };\n\n        // index numFmts\n        this.initIndex();\n\n        const add = (_addFn, xform, {getter, params = []} = {}) => {\n          if (xform.model && xform.model.length) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const model of xform.model) {\n              _addFn.call(this, ...[getter != null ? getter(model) : model], ...params);\n            }\n          }\n        };\n\n        add(this._addNumFmtStr, this.map.numFmts, {getter: (model) => model.formatCode, params: [true]});\n        add(this._addFont, this.map.fonts, {params: [true]});\n        add(this._addFill, this.map.fills, {params: [true]});\n        add(this._addBorder, this.map.borders, {params: [true]});\n        add(this._addStyleXfs, this.map.cellStyleXfs, {params: [true]});\n        add(this._addStyle, this.map.cellXfs, {params: [true]});\n        add(this._addCellStyle, this.map.cellStyles, {params: [true]});\n        add(this.addDxfStyle, this.map.dxfs, {params: [true]});\n        add(this._addColor, this.map.colors);\n\n        if (this.model.numFmts) {\n          const numFmtIndex = this.index.numFmt;\n          this.model.numFmts.forEach(numFmt => {\n            numFmtIndex[numFmt.id] = numFmt.formatCode;\n          });\n        }\n\n        return false;\n      }\n      default:\n        // not quite sure how we get here!\n        return true;\n    }\n  }\n\n  // add a cell's style model to the collection\n  // each style property is processed and cross-referenced, etc.\n  // the styleId is returned. Note: cellType is used when numFmt not defined\n  addStyleModel(model, cellType) {\n    if (!model) {\n      return 0;\n    }\n\n    // if we have no default font, add it here now\n    if (!this.model.fonts.length) {\n      // default (zero) font\n      this._addFont({size: 11, color: {theme: 1}, name: 'Calibri', family: 2, scheme: 'minor'});\n    }\n\n    // if we have seen this style object before, assume it has the same styleId\n    if (this.weakMap && this.weakMap.has(model)) {\n      return this.weakMap.get(model);\n    }\n\n    const style = {};\n    cellType = cellType || Enums.ValueType.Number;\n\n    if (model.numFmt) {\n      style.numFmtId = this._addNumFmtStr(model.numFmt);\n    } else {\n      switch (cellType) {\n        case Enums.ValueType.Number:\n          style.numFmtId = this._addNumFmtStr('General');\n          break;\n        case Enums.ValueType.Date:\n          style.numFmtId = this._addNumFmtStr('mm-dd-yy');\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (model.font) {\n      style.fontId = this._addFont(model.font);\n    }\n\n    if (model.border) {\n      style.borderId = this._addBorder(model.border);\n    }\n\n    if (model.fill) {\n      style.fillId = this._addFill(model.fill);\n    }\n\n    if (model.alignment) {\n      style.alignment = model.alignment;\n    }\n\n    if (model.protection) {\n      style.protection = model.protection;\n    }\n\n    const styleId = this._addStyle(style);\n    if (this.weakMap) {\n      this.weakMap.set(model, styleId);\n    }\n    return styleId;\n  }\n\n  // given a styleId (i.e. s=\"n\"), get the cell's style model\n  // objects are shared where possible.\n  getStyleModel(id) {\n    // if the style doesn't exist return null\n    const style = this.model.styles[id];\n    if (!style) return null;\n\n    // have we built this model before?\n    let model = this.index.model[id];\n    if (model) return model;\n\n    // build a new model\n    model = this.index.model[id] = {};\n\n    // -------------------------------------------------------\n    // number format\n    if (style.numFmtId) {\n      const numFmt = this.index.numFmt[style.numFmtId] || NumFmtXform.getDefaultFmtCode(style.numFmtId);\n      if (numFmt) {\n        model.numFmt = numFmt;\n      }\n    }\n\n    function addStyle(name, group, styleId) {\n      if (styleId || styleId === 0) {\n        const part = group[styleId];\n        if (part) {\n          model[name] = part;\n        }\n      }\n    }\n\n    addStyle('font', this.model.fonts, style.fontId);\n    addStyle('border', this.model.borders, style.borderId);\n    addStyle('fill', this.model.fills, style.fillId);\n\n    // -------------------------------------------------------\n    // alignment\n    if (style.alignment) {\n      model.alignment = style.alignment;\n    }\n\n    // -------------------------------------------------------\n    // protection\n    if (style.protection) {\n      model.protection = style.protection;\n    }\n\n    return model;\n  }\n\n  addDxfStyle(style) {\n    this.model.dxfs.push(style);\n    return this.model.dxfs.length - 1;\n  }\n\n  getDxfStyle(id) {\n    return this.model.dxfs[id];\n  }\n\n  // =========================================================================\n  // Private Interface\n  _addStyle(style, allowDuplicates) {\n    const xml = this.map.style.toXml(style);\n    let index = this.index.style[xml];\n    if (index === undefined || allowDuplicates === true) {\n      index = this.index.style[xml] = this.model.styles.length;\n      this.model.styles.push(xml);\n    }\n    return index;\n  }\n\n  _addStyleXfs(style, allowDuplicates) {\n    const xml = this.map.styleXfs.toXml(style);\n    let index = this.index.styleXfs[xml];\n    if (index === undefined || allowDuplicates === true) {\n      index = this.index.styleXfs[xml] = this.model.stylesXfs.length;\n      this.model.stylesXfs.push(xml);\n    }\n    return index;\n  }\n\n  _addCellStyle(style, allowDuplicates) {\n    const xml = this.map.cellStyle.toXml(style);\n    let index = this.index.cellStyle[xml];\n    if (index === undefined || allowDuplicates === true) {\n      index = this.index.cellStyle[xml] = this.model.cellStyles.length;\n      this.model.cellStyles.push(xml);\n    }\n    return index;\n  }\n\n  _addColor(style) {\n    const xml = this.map.color.toXml({\n      colors: style.colors,\n    });\n    this.model.colors.push(xml);\n  }\n\n  // =========================================================================\n  // Number Formats\n  _addNumFmtStr(formatCode, allowDuplicates) {\n    // check if default format\n    let index = NumFmtXform.getDefaultFmtId(formatCode);\n    if (index !== undefined) return index;\n\n    // check if already in\n    index = this.index.numFmt[formatCode];\n    if (index !== undefined && !allowDuplicates) return index;\n\n    index = this.index.numFmt[formatCode] = NUMFMT_BASE + this.model.numFmts.length;\n    const xml = this.map.numFmt.toXml({id: index, formatCode});\n    this.model.numFmts.push(xml);\n    return index;\n  }\n\n  // =========================================================================\n  // Fonts\n  _addFont(font, allowDuplicates) {\n    const xml = this.map.font.toXml(font);\n    let index = this.index.font[xml];\n    if (index === undefined || allowDuplicates === true) {\n      index = this.index.font[xml] = this.model.fonts.length;\n      this.model.fonts.push(xml);\n    }\n    return index;\n  }\n\n  // =========================================================================\n  // Borders\n  _addBorder(border, allowDuplicates) {\n    const xml = this.map.border.toXml(border);\n    let index = this.index.border[xml];\n    if (index === undefined || allowDuplicates === true) {\n      index = this.index.border[xml] = this.model.borders.length;\n      this.model.borders.push(xml);\n    }\n    return index;\n  }\n\n  // =========================================================================\n  // Fills\n  _addFill(fill, allowDuplicates) {\n    const xml = this.map.fill.toXml(fill);\n    let index = this.index.fill[xml];\n    if (index === undefined || allowDuplicates === true) {\n      index = this.index.fill[xml] = this.model.fills.length;\n      this.model.fills.push(xml);\n    }\n    return index;\n  }\n\n  // =========================================================================\n}\n\nStylesXform.STYLESHEET_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n  'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n  'mc:Ignorable': 'x14ac x16r2',\n  'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\n  'xmlns:x16r2': 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main',\n};\nStylesXform.STATIC_XFORMS = {\n  cellStyles: new StaticXform({tag: 'cellStyles', $: {count: 1}, c: [{tag: 'cellStyle', $: {name: 'Normal', xfId: 0, builtinId: 0}}]}),\n  dxfs: new StaticXform({tag: 'dxfs', $: {count: 0}}),\n  tableStyles: new StaticXform({tag: 'tableStyles', $: {count: 0, defaultTableStyle: 'TableStyleMedium2', defaultPivotStyle: 'PivotStyleLight16'}}),\n  extLst: new StaticXform({\n    tag: 'extLst',\n    c: [\n      {\n        tag: 'ext',\n        $: {uri: '{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}', 'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main'},\n        c: [{tag: 'x14:slicerStyles', $: {defaultSlicerStyle: 'SlicerStyleLight1'}}],\n      },\n      {\n        tag: 'ext',\n        $: {uri: '{9260A510-F301-46a8-8635-F512D64BE5F5}', 'xmlns:x15': 'http://schemas.microsoft.com/office/spreadsheetml/2010/11/main'},\n        c: [{tag: 'x15:timelineStyles', $: {defaultTimelineStyle: 'TimeSlicerStyleLight1'}}],\n      },\n    ],\n  }),\n};\n\n// the stylemanager mock acts like StyleManager except that it always returns 0 or {}\nclass StylesXformMock extends StylesXform {\n  constructor() {\n    super();\n\n    this.model = {\n      styles: [{numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0}],\n      stylesXfs: [],\n      cellStyles: [],\n      colors: [],\n      numFmts: [],\n      fonts: [{size: 11, color: {theme: 1}, name: 'Calibri', family: 2, scheme: 'minor'}],\n      borders: [{}],\n      fills: [{type: 'pattern', pattern: 'none'}, {type: 'pattern', pattern: 'gray125'}],\n    };\n  }\n\n  // =========================================================================\n  // Style Manager Interface\n\n  // override normal behaviour - consume and dispose\n  parseStream(stream) {\n    stream.autodrain();\n    return Promise.resolve();\n  }\n\n  // add a cell's style model to the collection\n  // each style property is processed and cross-referenced, etc.\n  // the styleId is returned. Note: cellType is used when numFmt not defined\n  addStyleModel(model, cellType) {\n    switch (cellType) {\n      case Enums.ValueType.Date:\n        return this.dateStyleId;\n      default:\n        return 0;\n    }\n  }\n\n  get dateStyleId() {\n    if (!this._dateStyleId) {\n      const dateStyle = {\n        numFmtId: NumFmtXform.getDefaultFmtId('mm-dd-yy'),\n      };\n      this._dateStyleId = this.model.styles.length;\n      this.model.styles.push(dateStyle);\n    }\n    return this._dateStyleId;\n  }\n\n  // given a styleId (i.e. s=\"n\"), get the cell's style model\n  // objects are shared where possible.\n  getStyleModel(/* id */) {\n    return {};\n  }\n}\n\nStylesXform.Mock = StylesXformMock;\n\nmodule.exports = StylesXform;\n"],"file":"styles-xform.js"}