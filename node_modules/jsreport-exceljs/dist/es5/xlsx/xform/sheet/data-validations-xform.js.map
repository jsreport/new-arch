{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/data-validations-xform.js"],"names":["_","require","utils","colCache","BaseXform","Range","assign","definedName","attributes","name","defaultValue","value","undefined","parseBool","assignBool","optimiseDataValidations","model","dvList","map","dataValidation","address","marked","sort","a","b","strcmp","dvMap","keyBy","matchCol","addr","height","col","i","otherAddress","encodeAddress","row","isEqual","dv","decodeAddress","width","j","bottom","right","sqref","filter","Boolean","DataValidationsXform","xmlStream","optimizedModel","length","openNode","count","forEach","type","addAttribute","operator","allowBlank","showInputMessage","promptTitle","prompt","showErrorMessage","errorStyle","errorTitle","error","formulae","formula","index","writeText","dateToExcel","Date","closeNode","node","_address","_dataValidation","_formula","text","push","includes","range","forEachAddress","join","parseInt","parseFloat","excelToDate","module","exports"],"mappings":"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","sourcesContent":["const _ = require('../../../utils/under-dash');\nconst utils = require('../../../utils/utils');\nconst colCache = require('../../../utils/col-cache');\nconst BaseXform = require('../base-xform');\nconst Range = require('../../../doc/range');\n\nfunction assign(definedName, attributes, name, defaultValue) {\n  const value = attributes[name];\n  if (value !== undefined) {\n    definedName[name] = value;\n  } else if (defaultValue !== undefined) {\n    definedName[name] = defaultValue;\n  }\n}\nfunction parseBool(value) {\n  switch (value) {\n    case '1':\n    case 'true':\n      return true;\n    default:\n      return false;\n  }\n}\nfunction assignBool(definedName, attributes, name, defaultValue) {\n  const value = attributes[name];\n  if (value !== undefined) {\n    definedName[name] = parseBool(value);\n  } else if (defaultValue !== undefined) {\n    definedName[name] = defaultValue;\n  }\n}\n\nfunction optimiseDataValidations(model) {\n  // Squeeze alike data validations together into rectangular ranges\n  // to reduce file size and speed up Excel load time\n  const dvList = _\n    .map(model, (dataValidation, address) => ({\n      address,\n      dataValidation,\n      marked: false,\n    }))\n    .sort((a, b) => _.strcmp(a.address, b.address));\n  const dvMap = _.keyBy(dvList, 'address');\n  const matchCol = (addr, height, col) => {\n    for (let i = 0; i < height; i++) {\n      const otherAddress = colCache.encodeAddress(addr.row + i, col);\n      if (!model[otherAddress] || !_.isEqual(model[addr.address], model[otherAddress])) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return dvList\n    .map(dv => {\n      if (!dv.marked) {\n        const addr = colCache.decodeAddress(dv.address);\n\n        // iterate downwards - finding matching cells\n        let height = 1;\n        let otherAddress = colCache.encodeAddress(addr.row + height, addr.col);\n        while (model[otherAddress] && _.isEqual(dv.dataValidation, model[otherAddress])) {\n          height++;\n          otherAddress = colCache.encodeAddress(addr.row + height, addr.col);\n        }\n\n        // iterate rightwards...\n\n        let width = 1;\n        while (matchCol(addr, height, addr.col + width)) {\n          width++;\n        }\n\n        // mark all included addresses\n        for (let i = 0; i < height; i++) {\n          for (let j = 0; j < width; j++) {\n            otherAddress = colCache.encodeAddress(addr.row + i, addr.col + j);\n            dvMap[otherAddress].marked = true;\n          }\n        }\n\n        if ((height > 1) || (width > 1)) {\n          const bottom = addr.row + (height - 1);\n          const right = addr.col + (width - 1);\n          return {\n            ...dv.dataValidation,\n            sqref: `${dv.address}:${colCache.encodeAddress(bottom, right)}`,\n          };\n        }\n        return {\n          ...dv.dataValidation,\n          sqref: dv.address,\n        };\n      }\n      return null;\n    })\n    .filter(Boolean);\n}\n\nclass DataValidationsXform extends BaseXform {\n  get tag() {\n    return 'dataValidations';\n  }\n\n  render(xmlStream, model) {\n    const optimizedModel = optimiseDataValidations(model);\n    if (optimizedModel.length) {\n      xmlStream.openNode('dataValidations', {count: optimizedModel.length});\n\n      optimizedModel.forEach(value => {\n        xmlStream.openNode('dataValidation');\n\n        if (value.type !== 'any') {\n          xmlStream.addAttribute('type', value.type);\n\n          if (value.operator && value.type !== 'list' && value.operator !== 'between') {\n            xmlStream.addAttribute('operator', value.operator);\n          }\n          if (value.allowBlank) {\n            xmlStream.addAttribute('allowBlank', '1');\n          }\n        }\n        if (value.showInputMessage) {\n          xmlStream.addAttribute('showInputMessage', '1');\n        }\n        if (value.promptTitle) {\n          xmlStream.addAttribute('promptTitle', value.promptTitle);\n        }\n        if (value.prompt) {\n          xmlStream.addAttribute('prompt', value.prompt);\n        }\n        if (value.showErrorMessage) {\n          xmlStream.addAttribute('showErrorMessage', '1');\n        }\n        if (value.errorStyle) {\n          xmlStream.addAttribute('errorStyle', value.errorStyle);\n        }\n        if (value.errorTitle) {\n          xmlStream.addAttribute('errorTitle', value.errorTitle);\n        }\n        if (value.error) {\n          xmlStream.addAttribute('error', value.error);\n        }\n        xmlStream.addAttribute('sqref', value.sqref);\n        (value.formulae || []).forEach((formula, index) => {\n          xmlStream.openNode(`formula${index + 1}`);\n          if (value.type === 'date') {\n            xmlStream.writeText(utils.dateToExcel(new Date(formula)));\n          } else {\n            xmlStream.writeText(formula);\n          }\n          xmlStream.closeNode();\n        });\n        xmlStream.closeNode();\n      });\n      xmlStream.closeNode();\n    }\n  }\n\n  parseOpen(node) {\n    switch (node.name) {\n      case 'dataValidations':\n        this.model = {};\n        return true;\n\n      case 'dataValidation': {\n        this._address = node.attributes.sqref;\n        const dataValidation = node.attributes.type ?\n          {type: node.attributes.type, formulae: []} :\n          {type: 'any'};\n\n        if (node.attributes.type) {\n          assignBool(dataValidation, node.attributes, 'allowBlank');\n        }\n        assignBool(dataValidation, node.attributes, 'showInputMessage');\n        assignBool(dataValidation, node.attributes, 'showErrorMessage');\n\n        switch (dataValidation.type) {\n          case 'any':\n          case 'list':\n          case 'custom':\n            break;\n          default:\n            assign(dataValidation, node.attributes, 'operator', 'between');\n            break;\n        }\n        assign(dataValidation, node.attributes, 'promptTitle');\n        assign(dataValidation, node.attributes, 'prompt');\n        assign(dataValidation, node.attributes, 'errorStyle');\n        assign(dataValidation, node.attributes, 'errorTitle');\n        assign(dataValidation, node.attributes, 'error');\n\n        this._dataValidation = dataValidation;\n        return true;\n      }\n\n      case 'formula1':\n      case 'formula2':\n        this._formula = [];\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this._formula) {\n      this._formula.push(text);\n    }\n  }\n\n  parseClose(name) {\n    switch (name) {\n      case 'dataValidations':\n\n        return false;\n      case 'dataValidation':\n        if (!this._dataValidation.formulae || !this._dataValidation.formulae.length) {\n          delete this._dataValidation.formulae;\n          delete this._dataValidation.operator;\n        }\n        if (this._address.includes(':')) {\n          const range = new Range(this._address);\n          range.forEachAddress(address => {\n            this.model[address] = this._dataValidation;\n          });\n        } else {\n          this.model[this._address] = this._dataValidation;\n        }\n        return true;\n      case 'formula1':\n      case 'formula2': {\n        let formula = this._formula.join('');\n        switch (this._dataValidation.type) {\n          case 'whole':\n          case 'textLength':\n            formula = parseInt(formula, 10);\n            break;\n          case 'decimal':\n            formula = parseFloat(formula);\n            break;\n          case 'date':\n            formula = utils.excelToDate(parseFloat(formula));\n            break;\n          default:\n            break;\n        }\n        this._dataValidation.formulae.push(formula);\n        this._formula = undefined;\n        return true;\n      }\n      default:\n        return true;\n    }\n  }\n}\n\nmodule.exports = DataValidationsXform;\n"],"file":"data-validations-xform.js"}