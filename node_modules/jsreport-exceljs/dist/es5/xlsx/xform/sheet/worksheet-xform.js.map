{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/worksheet-xform.js"],"names":["_","require","colCache","XmlStream","RelType","Merges","BaseXform","ListXform","RowXform","ColXform","DimensionXform","HyperlinkXform","MergeCellXform","DataValidationsXform","SheetPropertiesXform","SheetFormatPropertiesXform","SheetViewXform","SheetProtectionXform","PageMarginsXform","PageSetupXform","PrintOptionsXform","AutoFilterXform","PictureXform","DrawingXform","TablePartXform","RowBreaksXform","HeaderFooterXform","ConditionalFormattingsXform","ExtListXform","mergeRule","rule","extRule","Object","keys","forEach","key","value","extValue","undefined","mergeConditionalFormattings","model","extModel","length","cfMap","ruleMap","cf","ref","rules","x14Id","extCf","push","WorkSheetXform","options","maxRows","maxCols","map","sheetPr","dimension","sheetViews","tag","count","childXform","sheetFormatPr","cols","sheetData","empty","maxItems","autoFilter","mergeCells","rowBreaks","hyperlinks","pageMargins","dataValidations","pageSetup","headerFooter","printOptions","picture","drawing","sheetProtection","tableParts","conditionalFormatting","extLst","merges","comments","formulae","siFormulae","prepare","rows","conditionalFormattings","rels","nextRid","r","hyperlink","rId","Id","Type","Hyperlink","Target","target","TargetMode","comment","Comments","id","vmlDrawing","VmlDrawing","item","refAddress","decodeAddress","commentRefs","commentName","drawingRelsHash","bookImage","media","medium","type","imageId","Image","name","extension","background","image","drawingsCount","anchors","drawings","rIdImage","preImageId","anchor","range","rIdHyperLink","tooltip","tables","table","Table","columns","column","style","dxfId","styles","addDxfStyle","xmlStream","openXml","StdDocAttributes","openNode","WORKSHEET_ATTRIBUTES","sheetFormatPropertiesModel","properties","defaultRowHeight","dyDescent","outlineLevelCol","outlineLevelRow","defaultColWidth","sheetPropertiesModel","outlineProperties","tabColor","fitToPage","pageMarginsModel","margins","printOptionsModel","showRowColHeaders","showGridLines","horizontalCentered","verticalCentered","sheetProtectionModel","render","dimensions","views","rel","leafNode","closeNode","node","parser","parseOpen","each","xform","reset","text","parseText","parseClose","outlinePropertiesx","sheetProperties","assign","relationships","reduce","h","commentsMap","hyperlinkMap","address","filter","Boolean","row","cells","reconcile","drawingRel","match","drawingName","index","backgroundRel","split","mediaIndex","tablePart","xmlns","module","exports"],"mappings":"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","sourcesContent":["const _ = require('../../../utils/under-dash');\n\nconst colCache = require('../../../utils/col-cache');\nconst XmlStream = require('../../../utils/xml-stream');\n\nconst RelType = require('../../rel-type');\n\nconst Merges = require('./merges');\n\nconst BaseXform = require('../base-xform');\nconst ListXform = require('../list-xform');\nconst RowXform = require('./row-xform');\nconst ColXform = require('./col-xform');\nconst DimensionXform = require('./dimension-xform');\nconst HyperlinkXform = require('./hyperlink-xform');\nconst MergeCellXform = require('./merge-cell-xform');\nconst DataValidationsXform = require('./data-validations-xform');\nconst SheetPropertiesXform = require('./sheet-properties-xform');\nconst SheetFormatPropertiesXform = require('./sheet-format-properties-xform');\nconst SheetViewXform = require('./sheet-view-xform');\nconst SheetProtectionXform = require('./sheet-protection-xform');\nconst PageMarginsXform = require('./page-margins-xform');\nconst PageSetupXform = require('./page-setup-xform');\nconst PrintOptionsXform = require('./print-options-xform');\nconst AutoFilterXform = require('./auto-filter-xform');\nconst PictureXform = require('./picture-xform');\nconst DrawingXform = require('./drawing-xform');\nconst TablePartXform = require('./table-part-xform');\nconst RowBreaksXform = require('./row-breaks-xform');\nconst HeaderFooterXform = require('./header-footer-xform');\nconst ConditionalFormattingsXform = require('./cf/conditional-formattings-xform');\nconst ExtListXform = require('./ext-lst-xform');\n\nconst mergeRule = (rule, extRule) => {\n  Object.keys(extRule).forEach(key => {\n    const value = rule[key];\n    const extValue = extRule[key];\n    if ((value === undefined) && (extValue !== undefined)) {\n      rule[key] = extValue;\n    }\n  });\n};\n\nconst mergeConditionalFormattings = (model, extModel) => {\n  // conditional formattings are rendered in worksheet.conditionalFormatting and also in\n  // worksheet.extLst.ext.x14:conditionalFormattings\n  // some (e.g. dataBar) are even spread across both!\n  if (!extModel || !extModel.length) {\n    return model;\n  }\n  if (!model || !model.length) {\n    return extModel;\n  }\n\n  // index model rules by x14Id\n  const cfMap = {};\n  const ruleMap = {};\n  model.forEach(cf => {\n    cfMap[cf.ref] = cf;\n    cf.rules.forEach(rule => {\n      const {x14Id} = rule;\n      if (x14Id) {\n        ruleMap[x14Id] = rule;\n      }\n    });\n  });\n\n  extModel.forEach(extCf => {\n    extCf.rules.forEach(extRule => {\n      const rule = ruleMap[extRule.x14Id];\n      if (rule) {\n        // merge with matching rule\n        mergeRule(rule, extRule);\n      } else if (cfMap[extCf.ref]) {\n        // reuse existing cf ref\n        cfMap[extCf.ref].rules.push(extRule);\n      } else {\n        // create new cf\n        model.push({\n          ref: extCf.ref,\n          rules: [extRule],\n        });\n      }\n    });\n  });\n\n  // need to cope with rules in extModel that don't exist in model\n  return model;\n};\n\nclass WorkSheetXform extends BaseXform {\n  constructor(options) {\n    super();\n\n    const {maxRows, maxCols} = options || {};\n    this.map = {\n      sheetPr: new SheetPropertiesXform(),\n      dimension: new DimensionXform(),\n      sheetViews: new ListXform({tag: 'sheetViews', count: false, childXform: new SheetViewXform()}),\n      sheetFormatPr: new SheetFormatPropertiesXform(),\n      cols: new ListXform({tag: 'cols', count: false, childXform: new ColXform()}),\n      sheetData: new ListXform({\n        tag: 'sheetData',\n        count: false,\n        empty: true,\n        childXform: new RowXform({maxItems: maxCols}),\n        maxItems: maxRows,\n      }),\n      autoFilter: new AutoFilterXform(),\n      mergeCells: new ListXform({tag: 'mergeCells', count: true, childXform: new MergeCellXform()}),\n      rowBreaks: new RowBreaksXform(),\n      hyperlinks: new ListXform({tag: 'hyperlinks', count: false, childXform: new HyperlinkXform()}),\n      pageMargins: new PageMarginsXform(),\n      dataValidations: new DataValidationsXform(),\n      pageSetup: new PageSetupXform(),\n      headerFooter: new HeaderFooterXform(),\n      printOptions: new PrintOptionsXform(),\n      picture: new PictureXform(),\n      drawing: new DrawingXform(),\n      sheetProtection: new SheetProtectionXform(),\n      tableParts: new ListXform({tag: 'tableParts', count: true, childXform: new TablePartXform()}),\n      conditionalFormatting: new ConditionalFormattingsXform(),\n      extLst: new ExtListXform(),\n    };\n  }\n\n  prepare(model, options) {\n    options.merges = new Merges();\n    model.hyperlinks = options.hyperlinks = [];\n    model.comments = options.comments = [];\n\n    options.formulae = {};\n    options.siFormulae = 0;\n    this.map.cols.prepare(model.cols, options);\n    this.map.sheetData.prepare(model.rows, options);\n    this.map.conditionalFormatting.prepare(model.conditionalFormattings, options);\n\n    model.mergeCells = options.merges.mergeCells;\n\n    // prepare relationships\n    const rels = (model.rels = []);\n\n    function nextRid(r) {\n      return `rId${r.length + 1}`;\n    }\n\n    model.hyperlinks.forEach(hyperlink => {\n      const rId = nextRid(rels);\n      hyperlink.rId = rId;\n      rels.push({\n        Id: rId,\n        Type: RelType.Hyperlink,\n        Target: hyperlink.target,\n        TargetMode: 'External',\n      });\n    });\n\n    // prepare comment relationships\n    if (model.comments.length > 0) {\n      const comment = {\n        Id: nextRid(rels),\n        Type: RelType.Comments,\n        Target: `../comments${model.id}.xml`,\n      };\n      rels.push(comment);\n      const vmlDrawing = {\n        Id: nextRid(rels),\n        Type: RelType.VmlDrawing,\n        Target: `../drawings/vmlDrawing${model.id}.vml`,\n      };\n      rels.push(vmlDrawing);\n\n      model.comments.forEach(item => {\n        item.refAddress = colCache.decodeAddress(item.ref);\n      });\n\n      options.commentRefs.push({\n        commentName: `comments${model.id}`,\n        vmlDrawing: `vmlDrawing${model.id}`,\n      });\n    }\n\n    const drawingRelsHash = [];\n    let bookImage;\n    model.media.forEach(medium => {\n      if (medium.type === 'background') {\n        const rId = nextRid(rels);\n        bookImage = options.media[medium.imageId];\n        rels.push({\n          Id: rId,\n          Type: RelType.Image,\n          Target: `../media/${bookImage.name}.${bookImage.extension}`,\n        });\n        model.background = {\n          rId,\n        };\n        model.image = options.media[medium.imageId];\n      } else if (medium.type === 'image') {\n        let {drawing} = model;\n        bookImage = options.media[medium.imageId];\n        if (!drawing) {\n          drawing = model.drawing = {\n            rId: nextRid(rels),\n            name: `drawing${++options.drawingsCount}`,\n            anchors: [],\n            rels: [],\n          };\n          options.drawings.push(drawing);\n          rels.push({\n            Id: drawing.rId,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n            Target: `../drawings/${drawing.name}.xml`,\n          });\n        }\n        let rIdImage = this.preImageId === medium.imageId ? drawingRelsHash[medium.imageId]: drawingRelsHash[drawing.rels.length];\n        if (!rIdImage) {\n          rIdImage = nextRid(drawing.rels);\n          drawingRelsHash[drawing.rels.length] = rIdImage;\n          drawing.rels.push({\n            Id: rIdImage,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n            Target: `../media/${bookImage.name}.${bookImage.extension}`,\n          });\n        }\n\n        const anchor = {\n          picture: {\n            rId: rIdImage,\n          },\n          range: medium.range,\n        };\n        let rIdHyperLink = drawingRelsHash[drawing.rels.length];\n        if (medium.hyperlinks && medium.hyperlinks.hyperlink) {\n          rIdHyperLink = nextRid(drawing.rels);\n          drawingRelsHash[drawing.rels.length] = rIdHyperLink;\n          anchor.picture.hyperlinks = {\n            tooltip: medium.hyperlinks.tooltip,\n            rId: rIdHyperLink,\n          };\n          drawing.rels.push({\n            Id: rIdHyperLink,\n            Type: RelType.Hyperlink,\n            Target: medium.hyperlinks.hyperlink,\n            TargetMode: 'External',\n          });\n        }\n        this.preImageId = medium.imageId;\n        drawing.anchors.push(anchor);\n      }\n    });\n\n    // prepare tables\n    model.tables.forEach(table => {\n      // relationships\n      const rId = nextRid(rels);\n      table.rId = rId;\n      rels.push({\n        Id: rId,\n        Type: RelType.Table,\n        Target: `../tables/${table.target}`,\n      });\n\n      // dynamic styles\n      table.columns.forEach(column => {\n        const {style} = column;\n        if (style) {\n          column.dxfId = options.styles.addDxfStyle(style);\n        }\n      });\n    });\n\n    // prepare ext items\n    this.map.extLst.prepare(model, options);\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode('worksheet', WorkSheetXform.WORKSHEET_ATTRIBUTES);\n\n    const sheetFormatPropertiesModel = model.properties\n      ? {\n        defaultRowHeight: model.properties.defaultRowHeight,\n        dyDescent: model.properties.dyDescent,\n        outlineLevelCol: model.properties.outlineLevelCol,\n        outlineLevelRow: model.properties.outlineLevelRow,\n      }\n      : undefined;\n    if (model.properties && model.properties.defaultColWidth) {\n      sheetFormatPropertiesModel.defaultColWidth = model.properties.defaultColWidth;\n    }\n    const sheetPropertiesModel = {\n      outlineProperties: model.properties && model.properties.outlineProperties,\n      tabColor: model.properties && model.properties.tabColor,\n      pageSetup:\n        model.pageSetup && model.pageSetup.fitToPage\n          ? {\n            fitToPage: model.pageSetup.fitToPage,\n          }\n          : undefined,\n    };\n    const pageMarginsModel = model.pageSetup && model.pageSetup.margins;\n    const printOptionsModel = {\n      showRowColHeaders: model.pageSetup && model.pageSetup.showRowColHeaders,\n      showGridLines: model.pageSetup && model.pageSetup.showGridLines,\n      horizontalCentered: model.pageSetup && model.pageSetup.horizontalCentered,\n      verticalCentered: model.pageSetup && model.pageSetup.verticalCentered,\n    };\n    const sheetProtectionModel = model.sheetProtection;\n\n    this.map.sheetPr.render(xmlStream, sheetPropertiesModel);\n    this.map.dimension.render(xmlStream, model.dimensions);\n    this.map.sheetViews.render(xmlStream, model.views);\n    this.map.sheetFormatPr.render(xmlStream, sheetFormatPropertiesModel);\n    this.map.cols.render(xmlStream, model.cols);\n    this.map.sheetData.render(xmlStream, model.rows);\n    this.map.sheetProtection.render(xmlStream, sheetProtectionModel); // Note: must be after sheetData and before autoFilter\n    this.map.autoFilter.render(xmlStream, model.autoFilter);\n    this.map.mergeCells.render(xmlStream, model.mergeCells);\n    this.map.dataValidations.render(xmlStream, model.dataValidations);\n\n    // For some reason hyperlinks have to be after the data validations\n    this.map.hyperlinks.render(xmlStream, model.hyperlinks);\n\n    this.map.conditionalFormatting.render(xmlStream, model.conditionalFormattings);\n    this.map.printOptions.render(xmlStream, printOptionsModel); // Note: must be before pageMargins\n    this.map.pageMargins.render(xmlStream, pageMarginsModel);\n    this.map.pageSetup.render(xmlStream, model.pageSetup);\n    this.map.headerFooter.render(xmlStream, model.headerFooter);\n    this.map.rowBreaks.render(xmlStream, model.rowBreaks);\n    this.map.drawing.render(xmlStream, model.drawing); // Note: must be after rowBreaks\n    this.map.picture.render(xmlStream, model.background); // Note: must be after drawing\n    this.map.tableParts.render(xmlStream, model.tables);\n\n    this.map.extLst.render(xmlStream, model);\n\n    if (model.rels) {\n      // add a <legacyDrawing /> node for each comment\n      model.rels.forEach(rel => {\n        if (rel.Type === RelType.VmlDrawing) {\n          xmlStream.leafNode('legacyDrawing', {'r:id': rel.Id});\n        }\n      });\n    }\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    if (node.name === 'worksheet') {\n      _.each(this.map, xform => {\n        xform.reset();\n      });\n      return true;\n    }\n\n    this.parser = this.map[node.name];\n    if (this.parser) {\n      this.parser.parseOpen(node);\n    }\n    return true;\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case 'worksheet': {\n        const properties = this.map.sheetFormatPr.model;\n        if (this.map.sheetPr.model && this.map.sheetPr.model.tabColor) {\n          properties.tabColor = this.map.sheetPr.model.tabColor;\n        }\n        if (this.map.sheetPr.model && this.map.sheetPr.model.outlineProperties) {\n          properties.outlineProperties = this.map.sheetPr.model.outlinePropertiesx;\n        }\n        const sheetProperties = {\n          fitToPage: (this.map.sheetPr.model && this.map.sheetPr.model.pageSetup && this.map.sheetPr.model.pageSetup.fitToPage) || false,\n          margins: this.map.pageMargins.model,\n        };\n        const pageSetup = Object.assign(sheetProperties, this.map.pageSetup.model, this.map.printOptions.model);\n        const conditionalFormattings = mergeConditionalFormattings(\n          this.map.conditionalFormatting.model,\n          this.map.extLst.model && this.map.extLst.model['x14:conditionalFormattings']\n        );\n        this.model = {\n          dimensions: this.map.dimension.model,\n          cols: this.map.cols.model,\n          rows: this.map.sheetData.model,\n          mergeCells: this.map.mergeCells.model,\n          hyperlinks: this.map.hyperlinks.model,\n          dataValidations: this.map.dataValidations.model,\n          properties,\n          views: this.map.sheetViews.model,\n          pageSetup,\n          headerFooter: this.map.headerFooter.model,\n          background: this.map.picture.model,\n          drawing: this.map.drawing.model,\n          tables: this.map.tableParts.model,\n          conditionalFormattings,\n        };\n\n        if (this.map.autoFilter.model) {\n          this.model.autoFilter = this.map.autoFilter.model;\n        }\n        if (this.map.sheetProtection.model) {\n          this.model.sheetProtection = this.map.sheetProtection.model;\n        }\n\n        return false;\n      }\n\n      default:\n        // not quite sure how we get here!\n        return true;\n    }\n  }\n\n  reconcile(model, options) {\n    // options.merges = new Merges();\n    // options.merges.reconcile(model.mergeCells, model.rows);\n    const rels = (model.relationships || []).reduce((h, rel) => {\n      h[rel.Id] = rel;\n      if (rel.Type === RelType.Comments) {\n        model.comments = options.comments[rel.Target].comments;\n      }\n      return h;\n    }, {});\n    options.commentsMap = (model.comments || []).reduce((h, comment) => {\n      if (comment.ref) {\n        h[comment.ref] = comment;\n      }\n      return h;\n    }, {});\n    options.hyperlinkMap = (model.hyperlinks || []).reduce((h, hyperlink) => {\n      if (hyperlink.rId) {\n        h[hyperlink.address] = rels[hyperlink.rId].Target;\n      }\n      return h;\n    }, {});\n    options.formulae = {};\n\n    // compact the rows and cells\n    model.rows = (model.rows && model.rows.filter(Boolean)) || [];\n    model.rows.forEach(row => {\n      row.cells = (row.cells && row.cells.filter(Boolean)) || [];\n    });\n\n    this.map.cols.reconcile(model.cols, options);\n    this.map.sheetData.reconcile(model.rows, options);\n    this.map.conditionalFormatting.reconcile(model.conditionalFormattings, options);\n\n    model.media = [];\n    if (model.drawing) {\n      const drawingRel = rels[model.drawing.rId];\n      const match = drawingRel.Target.match(/\\/drawings\\/([a-zA-Z0-9]+)[.][a-zA-Z]{3,4}$/);\n      if (match) {\n        const drawingName = match[1];\n        const drawing = options.drawings[drawingName];\n        drawing.anchors.forEach(anchor => {\n          if (anchor.medium) {\n            const image = {\n              type: 'image',\n              imageId: anchor.medium.index,\n              range: anchor.range,\n              hyperlinks: anchor.picture.hyperlinks,\n            };\n            model.media.push(image);\n          }\n        });\n      }\n    }\n    \n    const backgroundRel = model.background && rels[model.background.rId];\n    if (backgroundRel) {\n      const target = backgroundRel.Target.split('/media/')[1];\n      const imageId = options.mediaIndex && options.mediaIndex[target];\n      if (imageId !== undefined) {\n        model.media.push({\n          type: 'background',\n          imageId,\n        });\n      }\n    }\n\n    model.tables = (model.tables || []).map(tablePart => {\n      const rel = rels[tablePart.rId];\n      return options.tables[rel.Target];\n    });\n\n    delete model.relationships;\n    delete model.hyperlinks;\n    delete model.comments;\n  }\n}\n\nWorkSheetXform.WORKSHEET_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n  'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n  'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n  'mc:Ignorable': 'x14ac',\n  'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\n};\n\nmodule.exports = WorkSheetXform;\n"],"file":"worksheet-xform.js"}