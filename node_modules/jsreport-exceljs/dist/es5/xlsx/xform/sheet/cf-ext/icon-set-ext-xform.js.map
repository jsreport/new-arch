{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/icon-set-ext-xform.js"],"names":["BaseXform","require","CompositeXform","CfvoExtXform","CfIconExtXform","IconSetExtXform","map","cfvoXform","cfIconXform","xmlStream","model","openNode","tag","iconSet","toStringAttribute","reverse","toBoolAttribute","showValue","custom","icons","cfvo","forEach","render","icon","i","iconId","closeNode","attributes","toStringValue","toBoolValue","name","parser","split","prop","push","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../../base-xform');\nconst CompositeXform = require('../../composite-xform');\n\nconst CfvoExtXform = require('./cfvo-ext-xform');\nconst CfIconExtXform = require('./cf-icon-ext-xform');\n\nclass IconSetExtXform extends CompositeXform {\n  constructor() {\n    super();\n\n    this.map = {\n      'x14:cfvo': this.cfvoXform = new CfvoExtXform(),\n      'x14:cfIcon': this.cfIconXform = new CfIconExtXform(),\n    };\n  }\n\n  get tag() {\n    return 'x14:iconSet';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      iconSet: BaseXform.toStringAttribute(model.iconSet),\n      reverse: BaseXform.toBoolAttribute(model.reverse, false),\n      showValue: BaseXform.toBoolAttribute(model.showValue, true),\n      custom: BaseXform.toBoolAttribute(model.icons, false),\n    });\n\n    model.cfvo.forEach(cfvo => {\n      this.cfvoXform.render(xmlStream, cfvo);\n    });\n\n    if (model.icons) {\n      model.icons.forEach((icon, i) => {\n        icon.iconId = i;\n        this.cfIconXform.render(xmlStream, icon);\n      });\n    }\n\n    xmlStream.closeNode();\n  }\n\n  createNewModel({attributes}) {\n    return {\n      cfvo: [],\n      iconSet: BaseXform.toStringValue(attributes.iconSet, '3TrafficLights'),\n      reverse: BaseXform.toBoolValue(attributes.reverse, false),\n      showValue: BaseXform.toBoolValue(attributes.showValue, true),\n    };\n  }\n\n  onParserClose(name, parser) {\n    const [,prop] = name.split(':');\n    switch (prop) {\n      case 'cfvo':\n        this.model.cfvo.push(parser.model);\n        break;\n\n      case 'cfIcon':\n        if (!this.model.icons) {\n          this.model.icons = [];\n        }\n        this.model.icons.push(parser.model);\n        break;\n\n      default:\n        this.model[prop] = parser.model;\n        break;\n    }\n  }\n}\n\nmodule.exports = IconSetExtXform;\n"],"file":"icon-set-ext-xform.js"}