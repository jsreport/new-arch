{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/conditional-formatting-ext-xform.js"],"names":["CompositeXform","require","SqRefExtXform","CfRuleExtXform","ConditionalFormattingExtXform","map","sqRef","cfRule","model","options","rules","forEach","rule","prepare","xmlStream","some","isExt","openNode","tag","filter","render","ref","closeNode","name","parser","push","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,cAAc,GAAGC,OAAO,CAAC,uBAAD,CAA9B;;AAEA,IAAMC,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,qBAAD,CAA9B;;IAEMG,6B;;;;;AACJ,2CAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,GAAL,GAAW;AACT,kBAAY,MAAKC,KAAL,GAAa,IAAIJ,aAAJ,EADhB;AAET,oBAAc,MAAKK,MAAL,GAAc,IAAIJ,cAAJ;AAFnB,KAAX;AAHY;AAOb;;;;4BAMOK,K,EAAOC,O,EAAS;AAAA;;AACtBD,MAAAA,KAAK,CAACE,KAAN,CAAYC,OAAZ,CAAoB,UAAAC,IAAI,EAAG;AACzB,QAAA,MAAI,CAACL,MAAL,CAAYM,OAAZ,CAAoBD,IAApB,EAA0BH,OAA1B;AACD,OAFD;AAGD;;;2BAEMK,S,EAAWN,K,EAAO;AAAA;;AACvB,UAAI,CAACA,KAAK,CAACE,KAAN,CAAYK,IAAZ,CAAiBZ,cAAc,CAACa,KAAhC,CAAL,EAA6C;AAC3C;AACD;;AAEDF,MAAAA,SAAS,CAACG,QAAV,CAAmB,KAAKC,GAAxB,EAA6B;AAC3B,oBAAY;AADe,OAA7B;AAIAV,MAAAA,KAAK,CAACE,KAAN,CACGS,MADH,CACUhB,cAAc,CAACa,KADzB,EAEGL,OAFH,CAEW,UAAAC,IAAI;AAAA,eAAI,MAAI,CAACL,MAAL,CAAYa,MAAZ,CAAmBN,SAAnB,EAA8BF,IAA9B,CAAJ;AAAA,OAFf,EATuB,CAavB;;AACA,WAAKN,KAAL,CAAWc,MAAX,CAAkBN,SAAlB,EAA6BN,KAAK,CAACa,GAAnC;AAEAP,MAAAA,SAAS,CAACQ,SAAV;AACD;;;qCAEgB;AACf,aAAO;AACLZ,QAAAA,KAAK,EAAE;AADF,OAAP;AAGD;;;kCAEaa,I,EAAMC,M,EAAQ;AAC1B,cAAQD,IAAR;AACE,aAAK,UAAL;AACE,eAAKf,KAAL,CAAWa,GAAX,GAAiBG,MAAM,CAAChB,KAAxB;AACA;;AAEF,aAAK,YAAL;AACE,eAAKA,KAAL,CAAWE,KAAX,CAAiBe,IAAjB,CAAsBD,MAAM,CAAChB,KAA7B;AACA;AAPJ;AASD;;;wBA7CS;AACR,aAAO,2BAAP;AACD;;;;EAZyCR,c;;AA0D5C0B,MAAM,CAACC,OAAP,GAAiBvB,6BAAjB","sourcesContent":["const CompositeXform = require('../../composite-xform');\n\nconst SqRefExtXform = require('./sqref-ext-xform');\nconst CfRuleExtXform = require('./cf-rule-ext-xform');\n\nclass ConditionalFormattingExtXform extends CompositeXform {\n  constructor() {\n    super();\n\n    this.map = {\n      'xm:sqref': this.sqRef = new SqRefExtXform(),\n      'x14:cfRule': this.cfRule = new CfRuleExtXform(),\n    };\n  }\n\n  get tag() {\n    return 'x14:conditionalFormatting';\n  }\n\n  prepare(model, options) {\n    model.rules.forEach(rule =>{\n      this.cfRule.prepare(rule, options);\n    });\n  }\n\n  render(xmlStream, model) {\n    if (!model.rules.some(CfRuleExtXform.isExt)) {\n      return;\n    }\n\n    xmlStream.openNode(this.tag, {\n      'xmlns:xm': 'http://schemas.microsoft.com/office/excel/2006/main',\n    });\n\n    model.rules\n      .filter(CfRuleExtXform.isExt)\n      .forEach(rule => this.cfRule.render(xmlStream, rule));\n\n    // for some odd reason, Excel needs the <xm:sqref> node to be after the rules\n    this.sqRef.render(xmlStream, model.ref);\n\n    xmlStream.closeNode();\n  }\n\n  createNewModel() {\n    return {\n      rules: [],\n    };\n  }\n\n  onParserClose(name, parser) {\n    switch (name) {\n      case 'xm:sqref':\n        this.model.ref = parser.model;\n        break;\n\n      case 'x14:cfRule':\n        this.model.rules.push(parser.model);\n        break;\n    }\n  }\n}\n\nmodule.exports = ConditionalFormattingExtXform;\n"],"file":"conditional-formatting-ext-xform.js"}