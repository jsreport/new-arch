{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/cf-rule-ext-xform.js"],"names":["uuid","require","BaseXform","CompositeXform","DatabarExtXform","IconSetExtXform","extIcons","CfRuleExtXform","map","databarXform","iconSetXform","model","isExt","x14Id","v4","toUpperCase","xmlStream","type","renderDataBar","renderIconSet","openNode","tag","id","render","closeNode","priority","attributes","toIntValue","name","parser","Object","assign","rule","custom","iconSet","module","exports"],"mappings":"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","sourcesContent":["const uuid = require('uuid');\nconst BaseXform = require('../../base-xform');\nconst CompositeXform = require('../../composite-xform');\n\nconst DatabarExtXform = require('./databar-ext-xform');\nconst IconSetExtXform = require('./icon-set-ext-xform');\n\nconst extIcons = {\n  '3Triangles': true,\n  '3Stars': true,\n  '5Boxes': true,\n};\n\nclass CfRuleExtXform extends CompositeXform {\n  constructor() {\n    super();\n\n    this.map = {\n      'x14:dataBar': this.databarXform = new DatabarExtXform(),\n      'x14:iconSet': this.iconSetXform = new IconSetExtXform(),\n    };\n  }\n\n  get tag() {\n    return 'x14:cfRule';\n  }\n\n  static isExt(rule) {\n    // is this rule primitive?\n    if (rule.type === 'dataBar') {\n      return DatabarExtXform.isExt(rule);\n    }\n    if (rule.type === 'iconSet') {\n      if (rule.custom || extIcons[rule.iconSet]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  prepare(model) {\n    if (CfRuleExtXform.isExt(model)) {\n      model.x14Id = `{${uuid.v4()}}`.toUpperCase();\n    }\n  }\n\n  render(xmlStream, model) {\n    if (!CfRuleExtXform.isExt(model)) {\n      return;\n    }\n\n    switch (model.type) {\n      case 'dataBar':\n        this.renderDataBar(xmlStream, model);\n        break;\n      case 'iconSet':\n        this.renderIconSet(xmlStream, model);\n        break;\n    }\n  }\n\n  renderDataBar(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'dataBar',\n      id: model.x14Id,\n    });\n\n    this.databarXform.render(xmlStream, model);\n\n    xmlStream.closeNode();\n  }\n\n  renderIconSet(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'iconSet',\n      priority: model.priority,\n      id: model.x14Id || `{${uuid.v4()}}`,\n    });\n\n    this.iconSetXform.render(xmlStream, model);\n\n    xmlStream.closeNode();\n  }\n\n  createNewModel({attributes}) {\n    return {\n      type: attributes.type,\n      x14Id: attributes.id,\n      priority: BaseXform.toIntValue(attributes.priority),\n    };\n  }\n\n  onParserClose(name, parser) {\n    Object.assign(this.model, parser.model);\n  }\n}\n\nmodule.exports = CfRuleExtXform;\n"],"file":"cf-rule-ext-xform.js"}