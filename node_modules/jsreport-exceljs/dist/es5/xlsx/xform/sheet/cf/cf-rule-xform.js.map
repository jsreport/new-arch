{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf/cf-rule-xform.js"],"names":["BaseXform","require","CompositeXform","Range","DatabarXform","ExtLstRefXform","FormulaXform","ColorScaleXform","IconSetXform","extIcons","getTextFormula","model","formulae","range","ref","tl","operator","text","undefined","getTimePeriodFormula","timePeriod","opType","attributes","type","CfRuleXform","map","dataBar","databarXform","extLst","extLstRefXform","formula","formulaXform","colorScale","colorScaleXform","iconSet","iconSetXform","xmlStream","renderExpression","renderCellIs","renderTop10","renderAboveAverage","renderDataBar","renderColorScale","renderIconSet","renderText","renderTimePeriod","openNode","tag","dxfId","priority","render","closeNode","forEach","leafNode","percent","toBoolAttribute","bottom","rank","toIntValue","aboveAverage","isPrimitive","toStringAttribute","toBoolValue","name","parser","Object","assign","push","rule","custom","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../../base-xform');\nconst CompositeXform = require('../../composite-xform');\n\nconst Range = require('../../../../doc/range');\n\nconst DatabarXform = require('./databar-xform');\nconst ExtLstRefXform = require('./ext-lst-ref-xform');\nconst FormulaXform = require('./formula-xform');\nconst ColorScaleXform = require('./color-scale-xform');\nconst IconSetXform = require('./icon-set-xform');\n\nconst extIcons = {\n  '3Triangles': true,\n  '3Stars': true,\n  '5Boxes': true,\n};\n\nconst getTextFormula = model => {\n  if (model.formulae && model.formulae[0]) {\n    return model.formulae[0];\n  }\n\n  const range = new Range(model.ref);\n  const {tl} = range;\n  switch (model.operator) {\n    case 'containsText':\n      return `NOT(ISERROR(SEARCH(\"${model.text}\",${tl})))`;\n    case 'containsBlanks':\n      return `LEN(TRIM(${tl}))=0`;\n    case 'notContainsBlanks':\n      return `LEN(TRIM(${tl}))>0`;\n    case 'containsErrors':\n      return `ISERROR(${tl})`;\n    case 'notContainsErrors':\n      return `NOT(ISERROR(${tl}))`;\n    default:\n      return undefined;\n  }\n};\n\nconst getTimePeriodFormula = model => {\n  if (model.formulae && model.formulae[0]) {\n    return model.formulae[0];\n  }\n\n  const range = new Range(model.ref);\n  const {tl} = range;\n  switch (model.timePeriod) {\n    case 'thisWeek':\n      return `AND(TODAY()-ROUNDDOWN(${tl},0)<=WEEKDAY(TODAY())-1,ROUNDDOWN(${tl},0)-TODAY()<=7-WEEKDAY(TODAY()))`;\n    case 'lastWeek':\n      return `AND(TODAY()-ROUNDDOWN(${tl},0)>=(WEEKDAY(TODAY())),TODAY()-ROUNDDOWN(${tl},0)<(WEEKDAY(TODAY())+7))`;\n    case 'nextWeek':\n      return `AND(ROUNDDOWN(${tl},0)-TODAY()>(7-WEEKDAY(TODAY())),ROUNDDOWN(${tl},0)-TODAY()<(15-WEEKDAY(TODAY())))`;\n    case 'yesterday':\n      return `FLOOR(${tl},1)=TODAY()-1`;\n    case 'today':\n      return `FLOOR(${tl},1)=TODAY()`;\n    case 'tomorrow':\n      return `FLOOR(${tl},1)=TODAY()+1`;\n    case 'last7Days':\n      return `AND(TODAY()-FLOOR(${tl},1)<=6,FLOOR(${tl},1)<=TODAY())`;\n    case 'lastMonth':\n      return `AND(MONTH(${tl})=MONTH(EDATE(TODAY(),0-1)),YEAR(${tl})=YEAR(EDATE(TODAY(),0-1)))`;\n    case 'thisMonth':\n      return `AND(MONTH(${tl})=MONTH(TODAY()),YEAR(${tl})=YEAR(TODAY()))`;\n    case 'nextMonth':\n      return `AND(MONTH(${tl})=MONTH(EDATE(TODAY(),0+1)),YEAR(${tl})=YEAR(EDATE(TODAY(),0+1)))`;\n    default:\n      return undefined;\n  }\n};\n\nconst opType = attributes => {\n  const {type, operator} = attributes;\n  switch (type) {\n    case 'containsText':\n    case 'containsBlanks':\n    case 'notContainsBlanks':\n    case 'containsErrors':\n    case 'notContainsErrors':\n      return {\n        type: 'containsText',\n        operator: type,\n      };\n\n    default:\n      return {type, operator};\n  }\n};\n\nclass CfRuleXform extends CompositeXform {\n  constructor() {\n    super();\n\n    this.map = {\n      dataBar: this.databarXform = new DatabarXform(),\n      extLst: this.extLstRefXform = new ExtLstRefXform(),\n      formula: this.formulaXform = new FormulaXform(),\n      colorScale: this.colorScaleXform = new ColorScaleXform(),\n      iconSet: this.iconSetXform = new IconSetXform(),\n    };\n  }\n\n  get tag() {\n    return 'cfRule';\n  }\n\n  static isPrimitive(rule) {\n    // is this rule primitive?\n    if (rule.type === 'iconSet') {\n      if (rule.custom || extIcons[rule.iconSet]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n\n  render(xmlStream, model) {\n    switch (model.type) {\n      case 'expression':\n        this.renderExpression(xmlStream, model);\n        break;\n      case 'cellIs':\n        this.renderCellIs(xmlStream, model);\n        break;\n      case 'top10':\n        this.renderTop10(xmlStream, model);\n        break;\n      case 'aboveAverage':\n        this.renderAboveAverage(xmlStream, model);\n        break;\n      case 'dataBar':\n        this.renderDataBar(xmlStream, model);\n        break;\n      case 'colorScale':\n        this.renderColorScale(xmlStream, model);\n        break;\n      case 'iconSet':\n        this.renderIconSet(xmlStream, model);\n        break;\n      case 'containsText':\n        this.renderText(xmlStream, model);\n        break;\n      case 'timePeriod':\n        this.renderTimePeriod(xmlStream, model);\n        break;\n    }\n  }\n\n  renderExpression(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'expression',\n      dxfId: model.dxfId,\n      priority: model.priority,\n    });\n\n    this.formulaXform.render(xmlStream, model.formulae[0]);\n\n    xmlStream.closeNode();\n  }\n\n  renderCellIs(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'cellIs',\n      dxfId: model.dxfId,\n      priority: model.priority,\n      operator: model.operator,\n    });\n\n    model.formulae.forEach(formula => {\n      this.formulaXform.render(xmlStream, formula);\n    });\n\n    xmlStream.closeNode();\n  }\n\n  renderTop10(xmlStream, model) {\n    xmlStream.leafNode(this.tag, {\n      type: 'top10',\n      dxfId: model.dxfId,\n      priority: model.priority,\n      percent: BaseXform.toBoolAttribute(model.percent, false),\n      bottom: BaseXform.toBoolAttribute(model.bottom, false),\n      rank: BaseXform.toIntValue(model.rank, 10, true),\n    });\n  }\n\n  renderAboveAverage(xmlStream, model) {\n    xmlStream.leafNode(this.tag, {\n      type: 'aboveAverage',\n      dxfId: model.dxfId,\n      priority: model.priority,\n      aboveAverage: BaseXform.toBoolAttribute(model.aboveAverage, true),\n    });\n  }\n\n  renderDataBar(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'dataBar',\n      priority: model.priority,\n    });\n\n    this.databarXform.render(xmlStream, model);\n    this.extLstRefXform.render(xmlStream, model);\n\n    xmlStream.closeNode();\n  }\n\n  renderColorScale(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'colorScale',\n      priority: model.priority,\n    });\n\n    this.colorScaleXform.render(xmlStream, model);\n\n    xmlStream.closeNode();\n  }\n\n  renderIconSet(xmlStream, model) {\n    // iconset is all primitive or all extLst\n    if (!CfRuleXform.isPrimitive(model)) {\n      return;\n    }\n\n    xmlStream.openNode(this.tag, {\n      type: 'iconSet',\n      priority: model.priority,\n    });\n\n    this.iconSetXform.render(xmlStream, model);\n\n    xmlStream.closeNode();\n  }\n\n  renderText(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: model.operator,\n      dxfId: model.dxfId,\n      priority: model.priority,\n      operator: BaseXform.toStringAttribute(model.operator, 'containsText'),\n    });\n\n    const formula = getTextFormula(model);\n    if (formula) {\n      this.formulaXform.render(xmlStream, formula);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  renderTimePeriod(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      type: 'timePeriod',\n      dxfId: model.dxfId,\n      priority: model.priority,\n      timePeriod: model.timePeriod,\n    });\n\n    const formula = getTimePeriodFormula(model);\n    if (formula) {\n      this.formulaXform.render(xmlStream, formula);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  createNewModel({attributes}) {\n    return {\n      ...opType(attributes),\n      dxfId: BaseXform.toIntValue(attributes.dxfId),\n      priority: BaseXform.toIntValue(attributes.priority),\n      timePeriod: attributes.timePeriod,\n      percent: BaseXform.toBoolValue(attributes.percent),\n      bottom: BaseXform.toBoolValue(attributes.bottom),\n      rank: BaseXform.toIntValue(attributes.rank),\n      aboveAverage: BaseXform.toBoolValue(attributes.aboveAverage),\n    };\n  }\n\n  onParserClose(name, parser) {\n    switch(name) {\n      case 'dataBar':\n      case 'extLst':\n      case 'colorScale':\n      case 'iconSet':\n        // merge parser model with ours\n        Object.assign(this.model, parser.model);\n        break;\n\n      case 'formula':\n        // except - formula is a string and appends to formulae\n        this.model.formulae = this.model.formulae || [];\n        this.model.formulae.push(parser.model);\n        break;\n    }\n  }\n}\n\nmodule.exports = CfRuleXform;\n"],"file":"cf-rule-xform.js"}