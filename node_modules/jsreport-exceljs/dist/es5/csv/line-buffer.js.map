{"version":3,"sources":["../../../lib/csv/line-buffer.js"],"names":["require","EventEmitter","LineBuffer","options","encoding","buffer","corked","queue","chunk","data","lines","split","pop","forEach","line","push","emit","_flush","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;eAAuBA,OAAO,CAAC,QAAD,C;IAAvBC,Y,YAAAA,Y;;IAEDC,U;;;;;AACJ,sBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB;AAEA,UAAKC,QAAL,GAAgBD,OAAO,CAACC,QAAxB;AAEA,UAAKC,MAAL,GAAc,IAAd,CALmB,CAOnB;;AACA,UAAKC,MAAL,GAAc,KAAd;AACA,UAAKC,KAAL,GAAa,EAAb;AATmB;AAUpB,G,CAED;AACA;AACA;;;;;0BAEMC,K,EAAO;AACX;AACA;AACA,UAAMC,IAAI,GAAG,KAAKJ,MAAL,GAAc,KAAKA,MAAL,GAAcG,KAA5B,GAAoCA,KAAjD;AACA,UAAME,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,QAAX,CAAd,CAJW,CAMX;;AACA,WAAKN,MAAL,GAAcK,KAAK,CAACE,GAAN,EAAd;AAEAF,MAAAA,KAAK,CAACG,OAAN,CAAc,UAASC,IAAT,EAAe;AAC3B,YAAI,KAAKR,MAAT,EAAiB;AACf,eAAKC,KAAL,CAAWQ,IAAX,CAAgBD,IAAhB;AACD,SAFD,MAEO;AACL,eAAKE,IAAL,CAAU,MAAV,EAAkBF,IAAlB;AACD;AACF,OAND;AAQA,aAAO,CAAC,KAAKR,MAAb;AACD;;;2BAEM;AACL,WAAKA,MAAL,GAAc,IAAd;AACD;;;6BAEQ;AACP,WAAKA,MAAL,GAAc,KAAd;;AACA,WAAKW,MAAL,GAFO,CAIP;;;AACA,WAAKD,IAAL,CAAU,OAAV;AACD;;;yCAEoB,CACnB;AACD;;;0BAEK;AACJ,UAAI,KAAKX,MAAT,EAAiB;AACf,aAAKW,IAAL,CAAU,MAAV,EAAkB,KAAKX,MAAvB;AACA,aAAKA,MAAL,GAAc,IAAd;AACD;;AACD,WAAKW,IAAL,CAAU,MAAV;AACD;;;6BAEQ;AAAA;;AACP,UAAI,CAAC,KAAKV,MAAV,EAAkB;AAChB,aAAKC,KAAL,CAAWM,OAAX,CAAmB,UAAAC,IAAI,EAAI;AACzB,UAAA,MAAI,CAACE,IAAL,CAAU,MAAV,EAAkBF,IAAlB;AACD,SAFD;AAGA,aAAKP,KAAL,GAAa,EAAb;AACD;AACF;;;;EApEsBN,Y;;AAuEzBiB,MAAM,CAACC,OAAP,GAAiBjB,UAAjB","sourcesContent":["const {EventEmitter} = require('events');\n\nclass LineBuffer extends EventEmitter {\n  constructor(options) {\n    super();\n\n    this.encoding = options.encoding;\n\n    this.buffer = null;\n\n    // part of cork/uncork\n    this.corked = false;\n    this.queue = [];\n  }\n\n  // Events:\n  //  line: here is a line\n  //  done: all lines emitted\n\n  write(chunk) {\n    // find line or lines in chunk and emit them if not corked\n    // or queue them if corked\n    const data = this.buffer ? this.buffer + chunk : chunk;\n    const lines = data.split(/\\r?\\n/g);\n\n    // save the last line\n    this.buffer = lines.pop();\n\n    lines.forEach(function(line) {\n      if (this.corked) {\n        this.queue.push(line);\n      } else {\n        this.emit('line', line);\n      }\n    });\n\n    return !this.corked;\n  }\n\n  cork() {\n    this.corked = true;\n  }\n\n  uncork() {\n    this.corked = false;\n    this._flush();\n\n    // tell the source I'm ready again\n    this.emit('drain');\n  }\n\n  setDefaultEncoding() {\n    // ?\n  }\n\n  end() {\n    if (this.buffer) {\n      this.emit('line', this.buffer);\n      this.buffer = null;\n    }\n    this.emit('done');\n  }\n\n  _flush() {\n    if (!this.corked) {\n      this.queue.forEach(line => {\n        this.emit('line', line);\n      });\n      this.queue = [];\n    }\n  }\n}\n\nmodule.exports = LineBuffer;\n"],"file":"line-buffer.js"}